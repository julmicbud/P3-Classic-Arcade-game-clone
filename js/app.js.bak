// Enemies our player must avoid
var Enemy = function() {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started
	this.sprite = 'images/enemy-bug.png';
	this.x = -101;
	this.y = 62 + (85.5 * (Math.floor(Math.random() * 3)));
	this.speed = (Math.random() * 800) + 100;
    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
    if(this.x <= 550){
        this.x += this.speed * dt;
    }else{
        this.x = -2;
    }
    // Reset the game if player hits a bug's proximity by 35px
    if(player.x >= this.x - 35 && player.x <= this.x + 35){
        if(player.y >= this.y - 35 && player.y <= this.y + 35){
            this.reset();
        }
    }
};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function () {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.
var Player = function() {
    this.sprite = 'images/char-princess-girl.png';
    this.x = 202;
    this.y = 404;
    this.runsCompleted = 0;
};

Player.prototype.update = function() {
	if (this.y <= 0){
		this.runsCompleted += 1;
		this.y = 404;
	};
	if (this.x <= 0) {
		this.x = 0;
	}
	if(this.x >= 404) {
		this.x = 404;
	}
	if (this.y >= 404) {
		this.y = 404;
	};
};

Player.prototype.render = function () {
   ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

Player.prototype.handleInput = function(key) {
	var direction = {
		'left': [-101, 0],
		'up': [0, -85.5],
		'right': [101, 0],
		'down': [0, 85.5]
		};
		this.x += direction[key][0];
		this.y += direction[key][1];
};

Object.prototype.reset = function() {
  player.x = 200;
  player.y = 400;
};

// Now instantiate your objects.
// Place all enemy objects in an array called allEnemies
// Place the player object in a variable called player
var allEnemies = [];
allEnemies[0] = new Enemy();
allEnemies[1] = new Enemy();
allEnemies[2] = new Enemy();

var player = new Player();
// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    player.handleInput(allowedKeys[e.keyCode]);
});